# Docker Compose for StockAI Trading System
version: '3.8'

services:
  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: stockai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for main database
  postgres:
    image: postgres:15-alpine
    container_name: stockai-postgres
    environment:
      POSTGRES_DB: stockai
      POSTGRES_USER: stockai
      POSTGRES_PASSWORD: stockai_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stockai"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main StockAI application
  stockai:
    build: .
    container_name: stockai-app
    ports:
      - "8501:8501"  # Streamlit UI
    environment:
      # Database
      DATABASE_URL: postgresql://stockai:stockai_password@postgres:5432/stockai
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      
      # Alpaca API (set these in .env file)
      ALPACA_API_KEY: ${ALPACA_API_KEY}
      ALPACA_API_SECRET: ${ALPACA_API_SECRET}
      ALPACA_BASE_URL: https://paper-api.alpaca.markets
      
      # Application settings
      DEBUG: false
      LOG_LEVEL: INFO
      LOG_FILE: logs/stockai.log
      
      # Trading settings
      STOCK_LIST: AAPL,TSLA,GOOGL
      CONFIDENCE_THRESHOLD: 60.0
      BASE_QUANTITY: 100
      MAX_QUANTITY: 500
      CYCLE_INTERVAL: 60
      INITIAL_CASH: 100000.0
      
      # Model paths
      ENSEMBLE_MODEL_PATHS: models/trained_rl_model_sac.pkl,models/trained_rl_model_ppo.pkl,models/trained_rl_model_a2c.pkl,models/trained_rl_model_dqn.pkl,models/trained_rl_model_td3.pkl
      
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./data:/app/data
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: stockai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: stockai-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: stockai-network
